import java.util.*;

class Solution{
        public int solution(int[] scoville, int K) {
            //scoville : 모든 음식의 스코빌 지수가 담긴 배열
            //K : 목표 스코빌 지수 K 이상
            //음식의 조합으로 K이상을 만들 수 없는 경우, -1을 반환.
            //섞는 횟수를 최소로 해서 return.

            //큐를 이용해서 맨 앞의 자료를 pop하고 그 다음 원소랑 비교
            //큰 쪽과 작은 쪽을 정해서 필요한 연산 수행, -> K 보다 크면 리턴, 그렇지 않으면 속행

            //필요변수:
            //cnt : 섞은 횟수
            //tmp : 현재 조합해서 얻은 스코빌 지수 임시합

            //종료조건 : tmp가 K이상 이면서 (%%) 큐의 맨앞의 값이 K 이상일 때
            int answer = 0;
            PriorityQueue<Integer> pq = new PriorityQueue<>();

            int cnt = 0;
            int tmp = 0; 

            for(int i=0;i<scoville.length;i++) {
                pq.offer(scoville[i]); //우선순위 큐에 배열의 값들을 집어 넣는다. 숫자는 자체적으로 오름차순으로 정렬이 된다.
            }

            while(pq.peek() <= K){
                //System.out.println("here");
                if(pq.size() == 1) {
                    answer = -1;
                    break;
                }

                int a = pq.poll(); //큐의 맨 앞의 원소를 가져온다.
                int b = pq.poll(); //큐의 그 다음 (두번째) 원소를 가져온다.

                int c = a + (2*b);

                pq.offer(c); //구한 스코빌 합을 다시 큐에 넣는다.

                answer++;
            }


            return answer;    
        }
}
