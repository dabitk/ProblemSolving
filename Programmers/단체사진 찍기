import java.util.*;

class Solution {
    //1. 인덱스 방문 여부 체크 배열.
    static boolean[] check = new boolean[8];
    //2. 카카오 프렌즈 0~7 인덱스까지 각 알파벳을 매칭.
    static char[] friends = {'A','C','F','J','M','N','R','T'};
    static int answer;    
    
    public static boolean isPossible(StringBuilder sb, String[] data) {
        //주어진 조건 data에 맞는지 검사하는 메소드.
        for (int i = 0; i < data.length; i++) {
            //조건 0번 인덱스와 2번 인덱스는 조건을 제시한 프렌즈, 상대프렌즈 이므로 그 사이 거리를 구함. 단, 둘 사이의 프렌즈 수를 구해야 하기 때문에 최종 값에 -1.
            int gap = Math.abs(sb.indexOf(String.valueOf(data[i].charAt(0))) - sb.indexOf(String.valueOf(data[i].charAt(2))))-1;
            //조건의 4번 인덱스는 주어진 정수값.
            int condition_gap = data[i].charAt(4) - '0';
            //조건의 3번 인덱스는 대소비교 문자이므로 이에 따라 분기 처리.
            switch(data[i].charAt(3)) {
                case '=' :
                    if(gap != condition_gap) return false;
                    break;
                case '>' :
                    if(gap <= condition_gap) return false;
                    break;
                case '<' :
                    if(gap >= condition_gap) return false;
                    break;
            }
        }
        return true;
    }
    
    public static void dfs(int idx, StringBuilder sb, String[] data) {
        //idx == 마지막 프렌즈인 경우 조건을 검사 및 종료.
        if (idx == friends.length) {
            //조건 검사 메소드 호출.
            if(isPossible(sb, data)) {
                answer++;
            }
            return;
        }
        
        for (int i = 0; i < friends.length; i++) {
            if(check[i]) continue;
            check[i] = true;
            
            sb.append(String.valueOf(friends[i]));
            
            dfs(idx+1, sb, data);
            
            check[i] = false;
            sb.delete(idx, friends.length);
        }
    }
    
    public int solution(int n, String[] data) {
        //3. 모든 경우의 수를 만들 StringBuilder 객체.
        StringBuilder sb = new StringBuilder();
        //4. 초기화 해주어야 통과가 된다.
        answer = 0;
        //5. dfs메소드 호출.
        dfs(0,sb,data);
        
        return answer;
    }
}
