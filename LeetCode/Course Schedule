class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        //노드 연결정보 인접리스트 
        HashMap<Integer, List<Integer>> courseMap = new HashMap<>();
        
        for (int[] relation : prerequisites) {
            if (courseMap.containsKey(relation[1])) {
                courseMap.get(relation[1]).add(relation[0]);
            } else {
                List<Integer> nextCourses = new LinkedList<>();
                nextCourses.add(relation[0]);
                courseMap.put(relation[1], nextCourses);
            }
        }
        
        boolean[] path = new boolean[numCourses];
        
        for (int currCourse = 0; currCourse < numCourses; currCourse++) {
            if (this.isCyclic(currCourse, courseMap, path)) {
                return false;
            }
        }
        
        return true;
    }
    
    //그래프에 cycle이 존재하는지 체크하는 메서드.
    public boolean isCyclic(Integer currCourse, HashMap<Integer, List<Integer>> courseMap, boolean[] path) {
        if (path[currCourse]) {
            //이미 방문한 경우 = 사이클이 존재함.
            return true;
        }
        
        //선수 과목이 없음 = 즉 사이클이 존재하지 않음.
        if(!courseMap.containsKey(currCourse)) {
            return false;
        }
        
        //백트래킹 시작 전 해당 노드 방문 처리 (재귀 호출 후 노드 방문 처리 해제)
        path[currCourse] = true;
        
        //백트래킹 시작
        boolean ret = false;
        for (Integer nextCourse : courseMap.get(currCourse)) {
            ret = this.isCyclic(nextCourse, courseMap, path);
            if (ret)
                break;
        }
        
        //백트래킹 종료 후 해당 노드 방문처리 해제.
        path[currCourse] = false;
        return ret;
    }
}
