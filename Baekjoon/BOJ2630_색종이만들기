import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int N;
	static int[][] board;
	static int whiteCnt = 0, blueCnt = 0;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		board = new int[N][N];
		StringTokenizer st;
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				board[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		recurse(0,N-1,0,N-1);
		
		System.out.println(whiteCnt);
		System.out.println(blueCnt);
	}
	
	public static void recurse(int startX, int endX, int startY, int endY) {
		if (checkIfAllSame(startX,endX,startY,endY)) {
			if (board[startY][startX] == 1) {
				blueCnt++;
			} else {
				whiteCnt++;
			}
		} else {
			int midX = (endX+startX) / 2;
			int midY = (endY+startY) / 2;
			recurse(startX, midX, startY, midY);
			recurse(midX+1,endX, startY, midY);
			recurse(startX, midX, midY+1, endY);
			recurse(midX+1, endX, midY+1, endY);
		}
	}
	
	public static boolean checkIfAllSame(int startX, int endX, int startY, int endY) {
		int initColor = board[startY][startX];
		for(int i = startY; i <= endY; i++) {
			for(int j = startX; j <= endX; j++) {
				if(initColor != board[i][j]) {
					return false;
				}
			}
		}
		
		return true;
	}
}
