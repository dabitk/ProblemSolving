import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class BOJ4803 {
	static int[] arr;
	public static int find(int A) {
		if(arr[A] == A) return arr[A];
		return arr[A] = find(arr[A]);
	}
	public static void union(int A, int B) {
		A = find(A);
		B = find(B);
		if(A < B) {
			arr[B] = A;
		} else if(A > B) {
			arr[A] = B;
		} else {
			arr[B] = A;
			arr[A] = 0;
		}
	}
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		String line = "";
		loop:
		while(!(line = br.readLine()).equals("0 0")) {
			st = new StringTokenizer(line);
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			if(N == 0 && M == 0) break;
			Set<Integer> hs = new HashSet<>();
			arr = new int[N+1];
			for (int i = 1; i < arr.length; i++) {
				arr[i] = i;
			}
			
			for (int i = 0; i < M; i++) {
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				if(a == 0 && b == 0) break loop;
				union(a,b);
			}
			
			for(int i = 1; i < arr.length; i++) {
				int num = find(i);
				if(num > 0) hs.add(num);
			}
			if (hs.isEmpty()) {
				System.out.println("Case 3: No trees.");
			} else if(hs.size() == 1) {
				System.out.println("Case 2: There is one tree.");
			} else {
				System.out.println("Case 1: A forest of "+hs.size()+" trees.");
			}
		}
	}
}
