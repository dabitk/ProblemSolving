import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class BOJ4485 {
    static class node implements Comparable<node> {
        int r;
        int c;
        int rupee;
        node(int r, int c, int rupee) {
            this.r = r;
            this.c = c;
            this.rupee = rupee;
        }
        @Override
        public int compareTo(node o) {
            return rupee - o.rupee;
        }
    }
    static int n;
    static int[][] map;
    static boolean[][] visited;
    static int[][] resRupee;
    static int[][] dir = {{1,0},{-1,0},{0,1},{0,-1}};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        //테스트 케이스 카운트.
        int tcCount = 0;

        while(true) {
            tcCount++;

            st = new StringTokenizer(br.readLine());
            n = Integer.parseInt(st.nextToken()); //동굴 크기 n * n

            //n=0 입력시 종료
            if(n == 0) return;

            map = new int[n][n];
            visited = new boolean[n][n];
            resRupee = new int[n][n]; //다익스트라 결과값 arr

            for (int i = 0; i < n; i++) {
                //최대 거리값으로 초기화
                Arrays.fill(resRupee[i], n*125);

                st = new StringTokenizer(br.readLine());
                for (int j = 0; j < n; j++) {
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }

            PriorityQueue<node> q = new PriorityQueue<>(); //루피값 기준 오름차순.

            q.add(new node(0, 0, map[0][0])); //시작 좌표를 큐에 삽입.
            resRupee[0][0] = map[0][0];

            while(!q.isEmpty()) {
                node node = q.poll();
                int r = node.r;
                int c = node.c;
                int rupee = node.rupee;

                if(visited[r][c]) continue;
                visited[r][c] = true;

                //상하좌우
                for (int i = 0; i < 4; i++) {
                    int nr = r + dir[i][1];
                    int nc = c + dir[i][0];

                    //다음 좌표 (nr, nc)가 동굴 배열 범위 내인가?
                    if(nr >= 0 && nr < n && nc >= 0 && nc < n) {
                        //현재 좌표에서 잃는 루피 + 다음 좌표에서 잃는 루피 -> 가장 작은 값 찾기
                        if(rupee + map[nr][nc] < resRupee[nr][nc]) {
                            resRupee[nr][nc] = rupee + map[nr][nc];
                            q.add(new node(nr, nc, resRupee[nr][nc]));
                        }
                    }
                }
            }
            System.out.println("Problem " + tcCount + ": " + resRupee[n-1][n-1]);
        }
    }
}
