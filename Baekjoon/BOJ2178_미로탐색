import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


public class Main {
	static int N, M;
	static boolean[][] visited;
	static int[][] graph;
	static int[][] dir = {{0,1},{0,-1},{1,0},{-1,0}};
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
			
		graph = new int[N][M];
		visited = new boolean[N][M];
			
		for(int i = 0; i < N; i++) {
			String str = br.readLine();
			for(int j = 0; j < str.length(); j++) {
				graph[i][j] =  str.charAt(j) - '0';
			}
		}
		bfs(0,0);
			
		System.out.println(graph[N-1][M-1]);
	}
	
	public static void bfs(int y, int x) {
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(x, y));
		visited[y][x] = true;
		
		while (!q.isEmpty()) {
			Node cur = q.poll();
			int curY = cur.y;
			int curX = cur.x;
			for (int i = 0; i < 4; i++) {
				int nextY = curY + dir[i][0];
				int nextX = curX + dir[i][1];
				if(nextY >= N || nextY < 0 || nextX >= M || nextX < 0) continue;
				if(!visited[nextY][nextX] && graph[nextY][nextX] != 0) {
					visited[nextY][nextX] = true;
					graph[nextY][nextX] = graph[curY][curX] + 1;
					q.offer(new Node(nextX, nextY));
				}
			}
		}
		
	}
	
	static class Node {
		int y;
		int x;
		public Node (int x, int y) {
			this.y = y;
			this.x = x;
		}
	}
}
