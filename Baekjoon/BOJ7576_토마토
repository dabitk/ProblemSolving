import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class node {
		int x;
		int y;
		int val;
		public node(int y, int x, int val) {
			this.y = y;
			this.x = x;
			this.val = val;
		}
	}
	static int M, N;
	static int[][] dir = {{1,0},{-1,0},{0,1},{0,-1}}; 
	static int[][] map;
	static boolean[][] visited;
	static Queue<node> q;
	static int max = 0;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		visited = new boolean[N][M];
		q = new LinkedList<>();
		
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				if(map[i][j] == 1 && !visited[i][j]) {
					visited[i][j] = true;
					q.offer(new node(i,j,0));
				}
			}
		}
		
		while (!q.isEmpty()) {
			node node = q.poll();
			int curX = node.x;
			int curY = node.y;
			int curVal = node.val;
			map[curY][curX] = 1;
			//System.out.println("curY : "+ curY+" curX : "+curX+" curVal : "+curVal);
			for(int i = 0; i < dir.length; i++) {
				int nextY = curY + dir[i][0];
				int nextX = curX + dir[i][1];
				if(nextY >= N || nextY < 0 || nextX >= M || nextX < 0) continue;
				if(map[nextY][nextX] != -1 && !visited[nextY][nextX]) {
					visited[nextY][nextX] = true;
					q.offer(new node(nextY, nextX, curVal + 1));
					max = Math.max(max, curVal + 1);
				}
			}
		}
		boolean flag = false;
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				if(map[i][j] == 0) {
					flag = true;
				}
			}
		}
		if(flag) System.out.println(-1);
		else System.out.println(max);

	}
}
