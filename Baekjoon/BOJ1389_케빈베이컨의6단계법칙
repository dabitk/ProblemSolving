package BOJ;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class BOJ1389 {
	static int N, M;
	static int[][] graph = new int[101][101];
	static final int INF = 1000_000_000;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		for(int i = 0; i < 101; i++) {
			Arrays.fill(graph[i], INF);
		}
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			graph[a][b] = 1;
			graph[b][a] = 1;
		}
		
		for (int k = 1; k <= N; k++) {
			for (int a = 1; a <= N; a++) {
				for(int b = 1; b <= N; b++) {
					graph[a][b] = Math.min(graph[a][b], graph[a][k]+graph[k][b]);
				}
			}
		}
		int result = 987654321;
		int idx = -1;
		for(int i = 1; i <= N; i++) {
			int total = 0;
			for(int j = 1; j <=N; j++) {
				total += graph[i][j];
			}
			if(result > total) {
				result = total;
				idx = i;
			}
		}
		System.out.println(idx);
	}
}
