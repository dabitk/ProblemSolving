import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
	static class node {
		int y;
		int x;
		int val;
		public node (int y, int x, int val) {
			this.y = y;
			this.x = x;
			this.val = val;
		}
	}
	
	static int N, M, result = Integer.MAX_VALUE;
	static int[][] board;
	static List<node> chickenList = new ArrayList<>();
	static List<node> houseList = new ArrayList<>();
	static boolean[] visited = new boolean[13];
	static final int INF = 1000_000_000;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		board = new int[N][N];
		for(int i = 0 ; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				board[i][j] = Integer.parseInt(st.nextToken());
				if (board[i][j] == 1) {
					houseList.add(new node(i, j, board[i][j]));
				} else if (board[i][j] == 2) {
					chickenList.add(new node(i, j, board[i][j]));
				}
			}
		}
		dfs(0,0);
		System.out.println(result);
		
		
	}
	public static void dfs(int idx, int selected) {
		if(selected == M) {
			int tempResult = 0;
			for (int i = 0; i < houseList.size(); i++) {
				int dist = INF;
				for(int j = 0; j < chickenList.size(); j++) {
					if(visited[j]) {
						dist = Math.min(dist,  distance(houseList.get(i), chickenList.get(j)));
					}
				}
				tempResult+=dist;
			}
			result = Math.min(result, tempResult);
			return;
		}
		//기저
		if(idx == chickenList.size()) {
			return;
		}
		visited[idx] = true;
		dfs(idx+1, selected+1);
		visited[idx] = false;
		dfs(idx+1, selected);
		
	}
	public static int distance(node a, node b) {
		return Math.abs(a.y-b.y) + Math.abs(a.x - b.x);
	}
}
