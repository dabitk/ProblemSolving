package BaekJoon;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class BOJ14889 {
/**
 * 4
0 1 2 3
4 0 5 6
7 1 0 2
3 4 5 0
 */
	static StringBuilder sb = new StringBuilder();
	static int[][] scoreMap;
	static boolean[] visit;
	static int N, M;
	static ArrayList<Integer> list = new ArrayList<Integer>();
	static int Min = Integer.MAX_VALUE;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		
		N = Integer.parseInt(br.readLine());
		M = N / 2;//M은 N은 2로 나눈 각 팀 당 인원수.
		
		scoreMap = new int[N][N];
		visit = new boolean[N];
		
		int row = 0;
		int col;
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			col = 0;
			while(st.hasMoreElements()) {
				int a = Integer.parseInt(st.nextToken());
				scoreMap[row][col++] = a;
			}
			row++;
		}
		
		combi(0,0);
		System.out.println(Min);
		br.close();

	}
	public static void combi(int idx, int r) {
		if(r == M) {
			//방문한 팀과 방문하지 않은 팀을 각각 나누어 각 팀의 점수를 구한 뒤 최솟값을 찾는다.
			diff();
			return;
		}
		
		for(int i = idx; i < N; i++) {
			//방문하지 않았다면?
			if(!visit[i]) {
				visit[i] = true; //방문으로 변경
				combi(i + 1, r + 1); //재귀호출
				visit[i] = false; //재귀가 끝나면 비방문으로 변경
			}
		}

	}
	
	public static void diff() {
		int team_start = 0;
		int team_link = 0;
		
		for(int i = 0; i < N - 1; i++) {
			for(int j = i+1; j < N; j++) {
				//i번째 사람과 j번째 사람이 true라면 스타트팀으로 점수 플러스
				if(visit[i] == true && visit[j] == true) {
					team_start += scoreMap[i][j];
					team_start += scoreMap[j][i];
				} else if(visit[i] == false && visit[j] == false) {
					team_link += scoreMap[i][j];
					team_link += scoreMap[j][i];
				}
			}
		}
		
		//두 팅믜 점수 차이 (절대값)
		int val = Math.abs(team_start - team_link);
		
		
		Min = Math.min(val,Min);
	}
}
