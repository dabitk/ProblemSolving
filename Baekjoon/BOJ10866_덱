import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Deque;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		Deque<Integer> dq = new LinkedList<>();
		for (int i = 0; i < N; i++) {
			String[] arr = br.readLine().split(" ");
			if (arr.length > 1) {
				if(arr[0].equals("push_back")) {
					dq.addLast(Integer.parseInt(arr[1]));
				} else if(arr[0].equals("push_front")) {
					dq.addFirst(Integer.parseInt(arr[1]));
				}
			} else {
				if (arr[0].equals("front")) {
					if (dq.isEmpty()) {
						System.out.println("-1");
					} else {
						System.out.println(dq.getFirst());
					}
				} else if (arr[0].equals("back")) {
					if (dq.isEmpty()) {
						System.out.println("-1");
					} else {
						System.out.println(dq.getLast());
					}
				} else if (arr[0].equals("size")) {
					System.out.println(dq.size());
				} else if (arr[0].equals("empty")) {
					if (dq.isEmpty()) {
						System.out.println("1");
					} else {
						System.out.println("0");
					}
				} else if (arr[0].equals("pop_front")) {
					if (dq.isEmpty()) {
						System.out.println("-1");
					} else {
						System.out.println(dq.pollFirst());
					}
				} else if (arr[0].equals("pop_back")) {
					if (dq.isEmpty()) {
						System.out.println("-1");
					} else {
						System.out.println(dq.pollLast());
					}
				}
			}
		}
	}
}
