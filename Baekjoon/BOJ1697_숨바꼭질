import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int time = 0;
	static int[] visitedTime = new int[100001]; 
	static int subin,bro;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		subin = Integer.parseInt(st.nextToken());
		bro = Integer.parseInt(st.nextToken());
		
		if(subin == bro) {
			System.out.println(0);
			return;
		} else {
			bfs(subin);
		}
		
	}
	
	public static void bfs(int num) {
		Queue<Integer> q = new LinkedList<>();
		q.offer(num);
		visitedTime[num] = 1;
		while(!q.isEmpty()) {
			int cur = q.poll();
			int next = cur;
			for(int i = 0; i < 3; i++) {
				switch(i) {
					case 0:
						next = cur+1;
						break;
					case 1:
						next = cur-1;
						break;
					case 2:
						next = cur*2;
						break;
				}
				if(next == bro) {
					System.out.println(visitedTime[cur]);
					return;
				}
				
				if(next >= 0 && next < visitedTime.length && visitedTime[next] == 0) {
					q.add(next);
					visitedTime[next] = visitedTime[cur] + 1;
				}
			}
		}
	}
}
