import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int N, L;
	static int[][] arr;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		L = Integer.parseInt(st.nextToken());
		
		arr = new int[N][N];
		
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		int resultCnt = 0;
		
		for (int i = 0; i < N; i++) {
			if(scan(i, 0, 0)) {
				resultCnt++;
			}
			if(scan(0,i,1)) {
				resultCnt++;
			}
		}
		
		System.out.println(resultCnt);
	}
	
	public static boolean scan(int x, int y, int dir) {
		boolean[] visited = new boolean[N];
		int[] height = new int[N];
		
		for (int i = 0; i < N; i++) {
			height[i] = (dir == 0) ? arr[x][y + i] : arr[x + i][y];
		}
		
		for (int i = 0; i < N - 1; i++) {
			if (height[i] == height[i+1]) {
				continue;
			}
			
			if (Math.abs(height[i] - height[i + 1]) > 1) {
				return false;
			}
			
			if (height[i] - 1 == height[i + 1]) {
				for (int j = i + 1; j <= i + L; j++) {
					if(j >= N || visited[j] || height[j] != height[i+1]) {
						return false;
					}
					visited[j] = true;
				}
			} else if (height[i] + 1 == height[i + 1]) {
				for (int j = i; j > i - L; j--) {
					if (j < 0 || visited[j] || height[j] != height[i]) {
						return false;
					}
					visited[j] = true;
				}
			}
		}
		return true;
	}
}
