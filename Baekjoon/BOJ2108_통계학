package BaekJoon;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

public class BOJ2108 {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		//입력값의 범위 : -4000 ~ 4000
		int[] arr = new int[8001];
		
		
		int sum = 0;
		int max = Integer.MIN_VALUE;
		int min = Integer.MAX_VALUE;
		int median = Integer.MIN_VALUE;
		int mode = Integer.MIN_VALUE;
		
		for (int i = 0; i < N; i++) {
			int value = Integer.parseInt(br.readLine());
			sum += value;
			arr[value + 4000]++;
			
			if (max < value) {
				max = value;
			}
			if(min > value) {
				min = value;
			}
		}
		
		//순회
		int count = 0; //중앙값 빈도 누적 수
		int mode_max = 0; //최빈값의 최대값
		
		//이전의 동일한 최빈값이 1번만 등장했을 경우 true, 아닐경우 false
		boolean flag = false;
		
		for (int i = min + 4000; i <= max + 4000; i++) {
			if(arr[i] > 0) {
				//중앙값 찾기.
				if (count < (N + 1) / 2) {
					count += arr[i]; //i값의 빈도수를 count에 누적
					median = i - 4000;
				}
				
				//최빈값 찾기
				if (mode_max < arr[i]) {
					mode_max = arr[i];
					mode = i - 4000;
					flag = true; //첫 등장이므로 true로 변경.
				} else if(mode_max == arr[i] && flag == true) { //이전 최빈값 최대값과 동일한 경우면서 한 번만 중복되는 경우.
					mode = i - 4000;
					flag = false;
				}
			}
		}
		System.out.println((int)Math.round((double)sum / N));
		System.out.println(median);
		System.out.println(mode);
		System.out.println(max-min);
	}
}
